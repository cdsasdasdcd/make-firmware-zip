#!/sbin/sh

OUTFD=/proc/self/fd/$2
ZIPFILE="$(pwd)/$3"

tmp=/data/tmp
rm -rf $tmp
mkdir -p $tmp
cd $tmp


ui_print() {
  echo -e "ui_print $1\nui_print" >>$OUTFD
}

datasize=$(df -h /data | grep /dev/block | awk '{print $4}')
if [ `echo $datasize | sed s/[[:digit:]]//g` = "G" ] && [ `echo $datasize | sed s/G//g` -gt 20 ];then
    echo "1"
else
    ui_print "data size error"
    exit
fi

keyListener() {
  key=$(getevent -qlc 1 2>&1 | grep VOLUME | grep " DOWN" | awk '{print $3}')
  if [ $key = "KEY_VOLUMEUP" ]; then
    echo "1"
    return "1"
  elif [ $key = "KEY_VOLUMEDOWN" ]; then
    echo "0"
    return "0"
  else 
    keyListener
  fi
}

#判断ddr类型
if [ "$(cat /proc/devinfo/ddr_type | grep -i DDR4)" ];then
    hh=ddr4
elif [ "$(cat /proc/devinfo/ddr_type | grep -i DDR5)" ];then
    hh=ddr5
elif [ "$(getprop ro.boot.ddr_type | grep -i 0)" ]; then
    hh=ddr4
elif [ "$(getprop ro.boot.ddr_type | grep -i 1)" ]; then
    hh=ddr5
else
    ui_print "Auto failed. Please select ddr."
    ui_print "Warning to choose the wrong black brick."
    ui_print "To cancel, press the power and volume 10+ seconds."
    ui_print "+ is ddr4   ||   - is ddr5"
    hh=$(keyListener)
    if [ $hh = 1 ];then
      hh=ddr4
    elif [ $hh = 0 ];then
      hh=ddr5
    fi
fi

ui_print " "
ui_print " "
ui_print "you device type is: $hh"

ui_print "firmware-update -> _a or _b?    + is a   ||  - is b"
_ab=$(keyListener)
if [ $_ab = 1 ];then
  _ab=a
elif [ $_ab = 0 ];then
  _ab=b
fi
    
#把获取的ddr_type写入文件   用于里层刷机脚本获取
echo "ddr=$hh" > type_zhlhlf

#把获取的a或者b写入文件   用于里层刷机脚本获取
echo "ab=_$_ab" >> type_zhlhlf


package_extract_file(){
    dd if=$1 of=$2 bs=4K
}

unzip -o "$ZIPFILE" META-INF/com/google/android/update-binary1
mv META-INF/com/google/android/update-binary1 ./
chmod 777 * -R      

./update-binary1 $1 $2 $ZIPFILE

if [ "$(unzip -v "$ZIPFILE" | grep "images/")" ];then
    ui_print "-----------flash rom-----------"
    ui_print "flash rom  -> a or b?    + is a   ||  - is b"
    hh=$(keyListener)
    
    if [ $hh = 1 ];then
      ab=0
    elif [ $hh = 0 ];then
      ab=1
    fi
    
    unzip -o "$ZIPFILE" images/*
    unzip -o "$ZIPFILE" lpmake
    unzip -o "$ZIPFILE" pack_super.sh
    chmod 777 * -R
    mv images project

    
    list="boot dtbo vbmeta vbmeta_system"
    if [ -f project/my_stock.img ];then
        list_super="odm.img product.img vendor.img system.img system_ext.img my_company.img my_preload.img my_engineering.img my_product.img my_bigball.img my_heytap.img my_region.img my_carrier.img my_manifest.img my_stock.img"
    else
        list_super="odm.img product.img vendor.img system.img system_ext.img"
    fi
        
    if [ $ab = "1" ];then
        ui_print "flash rom ----> b"
        bash pack_super.sh VAB "$list_super" b 
        for i in $list
        do
            ui_print "flash $i.img  -->  ${i}_b"
            package_extract_file project/${i}.img /dev/block/by-name/${i}_b         
            rm -rf project/${i}.img
        done
    elif [ $ab = "0" ];then
        ui_print "flash rom ----> a"
        bash pack_super.sh VAB "$list_super" a 
        for i in $list
        do
            ui_print "flash $i.img  -->  ${i}_a"
            package_extract_file project/${i}.img /dev/block/by-name/${i}_a
            rm -rf project/${i}.img
        done
    fi
    if [ -f project/super.img ];then    
        ui_print "flash super.img  -->  super"    
        package_extract_file project/super.img /dev/block/by-name/super        
    else
        ui_print "error"    
        exit
    fi
        
fi
ui_print "-----------------------------------------"
ui_print " Perfect Script Final Edition 2024-3-29"
ui_print "                              --by zhlhlf"
rm -rf $tmp

